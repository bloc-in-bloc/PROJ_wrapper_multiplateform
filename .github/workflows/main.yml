name: build

on:
  # Trigger the workflow on pull request,
  # but only for the main branch
  pull_request:
    branches:
      - main
      - f/class-wrapper
  # Also trigger on release created events
  release:
    types:
      - created
  workflow_dispatch:

env:
  LIBRARY_NAME: 'PROJ_wrapper_multiplatform'
  VCPKG_COMMIT_ID: 'd8160798747ac9953d3374f9473393868d76dfe6'

jobs:
  mac:
    runs-on: macos-13

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      id: runvcpkg
      with:
        vcpkgDirectory: '${{github.workspace}}/vcpkg'
        vcpkgGitCommitId: ${{env.VCPKG_COMMIT_ID}}
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Build mac
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'macos'
        buildPreset: 'macos-release'

    - name: Build ios
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'ios'
        buildPreset: 'ios-release'

    - name: package_apple
      run: |
        mkdir ${{env.LIBRARY_NAME}}_apple
        mkdir ${{env.LIBRARY_NAME}}_apple/x86_64
        mv build_mac/MinSizeRel/${{env.LIBRARY_NAME}}.bundle ${{env.LIBRARY_NAME}}_apple/x86_64
        mkdir ${{env.LIBRARY_NAME}}_apple/iOS
        mv build_ios/MinSizeRel-iphoneos/lib${{env.LIBRARY_NAME}}.a ${{env.LIBRARY_NAME}}_apple/iOS
    - uses: actions/upload-artifact@v3
      with:
        name: ${{env.LIBRARY_NAME}}_apple
        path: ${{env.LIBRARY_NAME}}_apple

  windows:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      id: runvcpkg
      with:
        vcpkgDirectory: '${{github.workspace}}/vcpkg'
        vcpkgGitCommitId: ${{env.VCPKG_COMMIT_ID}}
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Build win 64
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'win64'
        buildPreset: 'win64-release'

    - name: package_win
      run: |
        mkdir ${{env.LIBRARY_NAME}}_win/x86_64
        mv build_win_64\MinSizeRel\${{env.LIBRARY_NAME}}.dll ${{env.LIBRARY_NAME}}_win/x86_64
    - uses: actions/upload-artifact@v3
      with:
        name: ${{env.LIBRARY_NAME}}_win
        path: ${{env.LIBRARY_NAME}}_win

  android:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: apt_install
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install libzstd-dev ninja-build

    - name: install Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r26c
        add-to-path: false

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      id: runvcpkg
      with:
        vcpkgDirectory: '${{github.workspace}}/vcpkg'
        vcpkgGitCommitId: ${{env.VCPKG_COMMIT_ID}}
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Build android arm64 v8a
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'android_arm64-v8a'
        configurePresetAdditionalArgs: "['-DANDROID_ABI=arm64-v8a']"
        buildPreset: 'android_arm64-v8a-release'
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        VCPKG_DEFAULT_TRIPLET: arm64-android

    - name: Build android armeabi-v7a
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'android_armeabi-v7a'
        configurePresetAdditionalArgs: "['-DANDROID_ABI=armeabi-v7a']"
        buildPreset: 'android_armeabi-v7a-release'
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        VCPKG_DEFAULT_TRIPLET: arm-neon-android

    # Android artifact
    - name: package_linux
      run: |
        mkdir -p ${{env.LIBRARY_NAME}}_linux/Android/libs/arm64-v8a
        mv build_android_arm64-v8a/lib${{env.LIBRARY_NAME}}.so ${{env.LIBRARY_NAME}}_linux/Android/libs/arm64-v8a
        mkdir -p ${{env.LIBRARY_NAME}}_linux/Android/libs/armeabi-v7a
        mv build_android_armeabi-v7a/lib${{env.LIBRARY_NAME}}.so ${{env.LIBRARY_NAME}}_linux/Android/libs/armeabi-v7a
    - uses: actions/upload-artifact@v3
      with:
        name: ${{env.LIBRARY_NAME}}_linux
        path: ${{env.LIBRARY_NAME}}_linux

  combine:
    name: combine artifacts
    runs-on: ubuntu-20.04
    needs: [mac, windows, android]
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts
      - name: combine
        run: |
          mkdir ${{env.LIBRARY_NAME}}
          cp -r artifacts/${{env.LIBRARY_NAME}}_apple/* ${{env.LIBRARY_NAME}}
          cp -r artifacts/${{env.LIBRARY_NAME}}_win/* ${{env.LIBRARY_NAME}}
          cp -r artifacts/${{env.LIBRARY_NAME}}_linux/* ${{env.LIBRARY_NAME}}
      - name: zip
        run: zip -r ${{env.LIBRARY_NAME}}.zip ${{env.LIBRARY_NAME}}
      - uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release' && github.event.action == 'created'
        with:
          files: ${{env.LIBRARY_NAME}}.zip
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{env.LIBRARY_NAME}}.zip
          path: ${{env.LIBRARY_NAME}}.zip
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            ${{env.LIBRARY_NAME}}_apple
            ${{env.LIBRARY_NAME}}_win
            ${{env.LIBRARY_NAME}}_linux
